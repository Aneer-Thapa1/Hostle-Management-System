{
  "version": 3,
  "sources": ["../../react-cloudinary-upload-widget/src/components/WidgetButton.js", "../../react-cloudinary-upload-widget/src/functions/getterFunction.js", "../../react-cloudinary-upload-widget/src/functions/generateSignature.js", "../../react-cloudinary-upload-widget/src/functions/myWidget.js", "../../react-cloudinary-upload-widget/src/components/UploadWidget.js", "../../react-cloudinary-upload-widget/src/_hooks_/useScript.js", "../../react-cloudinary-upload-widget/src/index.js"],
  "sourcesContent": ["import React from 'react'\n\nconst WidgetButton = ({ myWidgetFunction, style, buttonText, buttonType }) => (\n  <>\n    <button\n      type={buttonType}\n      id='cloudinary_upload_button'\n      style={\n        style || {\n          color: 'white',\n          border: 'none',\n          width: '120px',\n          backgroundColor: 'green',\n          borderRadius: '4px',\n          height: '25px'\n        }\n      }\n      onClick={() => myWidgetFunction()}\n    >\n      {buttonText || 'Upload files'}\n    </button>\n  </>\n)\nWidgetButton.defaultProps = {\n  buttonType: 'button'\n}\nexport default WidgetButton\n", "import axios from 'axios'\n\nconst instance = axios.create()\n\ninstance.interceptors.response.use((response) => response.data)\n\nexport const getterFunction = ({\n  url,\n  data,\n  accepts,\n  contentType,\n  withCredentials\n}) => {\n  instance.defaults.headers.common['Accepts'] = accepts\n  instance.defaults.headers.common['Content-Type'] = contentType\n  instance.defaults.withCredentials = withCredentials\n  const options = {\n    url: url + '?nocache=' + new Date().getTime(),\n    method: 'post',\n    data: data\n  }\n\n  return instance(options)\n}\n", "import { getterFunction } from './getterFunction'\n\nconst generateSignature = (\n  cb,\n  params,\n  {\n    generateSignatureUrl,\n    accepts,\n    contentType,\n    withCredentials,\n    customPublicId,\n    eager,\n    apiKey,\n    resourceType,\n    unique_filename,\n    use_filename\n  },\n  logging\n) => {\n  params = [].concat(params) //params can be a single object or an array of objects\n  logging && console.log(params, 'Params')\n  Promise.all(\n    params.map((req) => {\n      const uploadParams = req\n      logging && console.log(req)\n      return getterFunction({\n        url: generateSignatureUrl,\n        data: {\n          params_to_sign: {\n            ...(req.custom_coordinates && {\n              custom_coordinates: req.custom_coordinates\n            }),\n            ...(eager && { eager: eager }),\n            ...(req.filename_override && {\n              filename_override: req.filename_override\n            }),\n            ...(req.headers && { headers: req.headers }),\n            ...(customPublicId && { public_id: customPublicId }),\n            ...(req.source && { source: req.source }),\n            timestamp: req.timestamp,\n            unique_filename: req.unique_filename,\n            ...(req.upload_preset && {\n              upload_preset: req.upload_preset\n            }),\n            use_filename: use_filename\n          }\n        },\n        accepts: accepts,\n        contentType: contentType,\n        withCredentials: withCredentials\n      }).then((response) => {\n        logging && console.log(response, 'Signature Response')\n        return Object.assign(\n          {\n            ...(eager && { eager: eager }),\n            ...(customPublicId && { public_id: customPublicId }),\n            signature: response,\n            api_key: apiKey,\n            resource_type: resourceType\n          },\n          uploadParams\n        )\n      })\n    })\n  ).then((results) => {\n    logging && console.log(results, 'Results')\n    cb(results.length === 1 ? results[0] : results)\n  })\n}\n\nexport default generateSignature\n", "import generateSignature from './generateSignature'\n\n// * put all new variables at the end\nconst myWidget = (\n  sources,\n  sourceKeys,\n  resourceType,\n  cloudName,\n  uploadPreset,\n  folder,\n  cropping,\n  generateSignatureUrl,\n  onSuccess,\n  onFailure,\n  logging,\n  customPublicId,\n  eager,\n  apiKey,\n  accepts,\n  contentType,\n  withCredentials,\n  use_filename,\n  unique_filename,\n  googleDriveClientId,\n  multiple,\n  widgetStyles,\n  destroy,\n  autoClose\n) => {\n  const widgetOptions = {\n    showCompletedButton: true,\n    multiple: multiple,\n    singleUploadAutoClose: autoClose,\n    showAdvancedOptions: true,\n    showPoweredBy: false,\n    styles: widgetStyles,\n    googleDriveClientId: googleDriveClientId,\n    sources: sources,\n    ...(sourceKeys && sourceKeys),\n    cloudName: cloudName,\n    uploadPreset: uploadPreset,\n    folder: folder,\n    cropping: cropping,\n    resourceType: resourceType,\n    ...(generateSignatureUrl && { use_filename: use_filename }),\n    ...(generateSignatureUrl && { eager: eager }),\n    ...(generateSignatureUrl && { unique_filename: unique_filename }),\n    ...(generateSignatureUrl && {\n      prepareUploadParams: async (cb, params) =>\n        generateSignature(\n          cb,\n          params,\n          {\n            generateSignatureUrl,\n            accepts,\n            contentType,\n            withCredentials,\n            customPublicId,\n            eager,\n            apiKey,\n            resourceType,\n            unique_filename,\n            use_filename\n          },\n          logging\n        )\n    })\n  }\n\n  const resultCallback = (error, result) => {\n    if (!error && result && result.event === 'success') {\n      logging && console.log('Done! Here is the image info: ', result.info)\n      logging && console.log(result)\n      !!window.cloudinaryOnSuccessCallback &&\n        window.cloudinaryOnSuccessCallback(result)\n      if (destroy) {\n        window.myWidget.destroy()\n        window.myWidget = null\n      }\n    } else if (error) {\n      window.cloudinaryOnFailureCallback\n        ? window.cloudinaryOnFailureCallback({ error: error, result: result })\n        : logging && console.log({ error: error, result: result })\n      if (destroy) {\n        window.myWidget.destroy()\n        window.myWidget = null\n      }\n    } else if (!!resourceType && result.info === 'shown') {\n      logging && console.log('setting resourceType')\n    } else {\n      logging && console.log(result)\n    }\n  }\n\n  window.cloudinaryOnSuccessCallback = onSuccess\n  window.cloudinaryOnFailureCallback = onFailure\n\n  if (window.myWidget) {\n    window.myWidget.update(widgetOptions)\n  } else {\n    window.myWidget = window.cloudinary.createUploadWidget(\n      widgetOptions,\n      resultCallback\n    )\n  }\n\n  window.myWidget.open()\n}\n\nexport default myWidget\n", "import React from 'react'\nimport WidgetButton from './WidgetButton'\nimport myWidget from '../functions/myWidget'\n\nconst UploadWidget = ({\n  sources = [],\n  sourceKeys = null,\n  resourceType = 'auto',\n  cloudName = null,\n  uploadPreset = null,\n  buttonText = null,\n  style = null,\n  widgetStyles = null,\n  folder = null,\n  cropping = true,\n  generateSignatureUrl,\n  onSuccess = null,\n  onFailure = null,\n  logging = true,\n  customPublicId = null,\n  eager = null,\n  apiKey = null,\n  accepts = 'application/json',\n  contentType = 'application/json',\n  withCredentials = true,\n  use_filename = true,\n  unique_filename = false,\n  googleDriveClientId = null,\n  multiple = false,\n  buttonType = 'button',\n  destroy = false,\n  autoClose = true\n}) => {\n  // * put all new variables at the end\n  const myWidgetFunction = () =>\n    myWidget(\n      sources,\n      sourceKeys,\n      resourceType,\n      cloudName,\n      uploadPreset,\n      folder,\n      cropping,\n      generateSignatureUrl,\n      onSuccess,\n      onFailure,\n      logging,\n      customPublicId,\n      eager,\n      apiKey,\n      accepts,\n      contentType,\n      withCredentials,\n      use_filename,\n      unique_filename,\n      googleDriveClientId,\n      multiple,\n      widgetStyles,\n      destroy,\n      autoClose\n    )\n\n  return (\n    <WidgetButton\n      myWidgetFunction={myWidgetFunction}\n      buttonText={buttonText}\n      buttonType={buttonType}\n      style={style}\n    />\n  )\n}\n\nexport default UploadWidget\n", "import { useEffect } from 'react'\n\nexport default (url) => {\n  useEffect(() => {\n    const script = document.createElement('script')\n\n    script.type = 'text/javascript'\n    script.src = url\n    script.async = true\n\n    document.body.appendChild(script)\n\n    return () => {\n      document.body.removeChild(script)\n      window.myWidget = null\n    }\n  }, [url])\n}\n", "import React from 'react'\nimport UploadWidget from './components/UploadWidget'\nimport useScript from './_hooks_/useScript'\n\nexport const WidgetLoader = () => (\n  <>{useScript('https://widget.cloudinary.com/v2.0/global/all.js')}</>\n)\nexport const Widget = (props) => <UploadWidget {...props} />\n"],
  "mappings": "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",
  "names": ["WidgetButton", "_ref", "myWidgetFunction", "style", "buttonText", "buttonType", "React", "createElement", "Fragment", "type", "id", "color", "border", "width", "backgroundColor", "borderRadius", "height", "onClick", "defaultProps", "instance", "axios", "create", "interceptors", "response", "use", "data", "getterFunction", "url", "accepts", "contentType", "withCredentials", "defaults", "headers", "common", "options", "Date", "getTime", "method", "generateSignature", "cb", "params", "logging", "generateSignatureUrl", "customPublicId", "eager", "apiKey", "resourceType", "unique_filename", "use_filename", "concat", "console", "log", "Promise", "all", "map", "req", "uploadParams", "params_to_sign", "_objectSpread", "custom_coordinates", "filename_override", "public_id", "source", "timestamp", "upload_preset", "then", "Object", "assign", "signature", "api_key", "resource_type", "results", "length", "myWidget", "sources", "sourceKeys", "cloudName", "uploadPreset", "folder", "cropping", "onSuccess", "onFailure", "googleDriveClientId", "multiple", "widgetStyles", "destroy", "autoClose", "widgetOptions", "showCompletedButton", "singleUploadAutoClose", "showAdvancedOptions", "showPoweredBy", "styles", "prepareUploadParams", "_prepareUploadParams", "_asyncToGenerator", "_regeneratorRuntime", "mark", "_callee", "wrap", "_callee$", "_context", "prev", "next", "abrupt", "stop", "_x", "_x2", "apply", "arguments", "resultCallback", "error", "result", "event", "info", "window", "cloudinaryOnSuccessCallback", "cloudinaryOnFailureCallback", "update", "cloudinary", "createUploadWidget", "open", "UploadWidget", "_ref$sources", "_ref$sourceKeys", "_ref$resourceType", "_ref$cloudName", "_ref$uploadPreset", "_ref$buttonText", "_ref$style", "_ref$widgetStyles", "_ref$folder", "_ref$cropping", "_ref$onSuccess", "_ref$onFailure", "_ref$logging", "_ref$customPublicId", "_ref$eager", "_ref$apiKey", "_ref$accepts", "_ref$contentType", "_ref$withCredentials", "_ref$use_filename", "_ref$unique_filename", "_ref$googleDriveClien", "_ref$multiple", "_ref$buttonType", "_ref$destroy", "_ref$autoClose", "useEffect", "script", "document", "src", "async", "body", "appendChild", "removeChild", "WidgetLoader", "useScript", "Widget", "props"]
}
