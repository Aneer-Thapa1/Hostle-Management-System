import {
  require_axios
} from "./chunk-TB4ZSRH5.js";
import {
  require_react
} from "./chunk-GMHSYVPX.js";
import {
  __commonJS
} from "./chunk-UV5CTPV7.js";

// node_modules/react-cloudinary-upload-widget/dist/index.js
var require_dist = __commonJS({
  "node_modules/react-cloudinary-upload-widget/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var React = require_react();
    var React__default = _interopDefault(React);
    var axios = _interopDefault(require_axios());
    var WidgetButton = function WidgetButton2(_ref) {
      var myWidgetFunction = _ref.myWidgetFunction, style = _ref.style, buttonText = _ref.buttonText, buttonType = _ref.buttonType;
      return React__default.createElement(React__default.Fragment, null, React__default.createElement("button", {
        type: buttonType,
        id: "cloudinary_upload_button",
        style: style || {
          color: "white",
          border: "none",
          width: "120px",
          backgroundColor: "green",
          borderRadius: "4px",
          height: "25px"
        },
        onClick: function onClick() {
          return myWidgetFunction();
        }
      }, buttonText || "Upload files"));
    };
    WidgetButton.defaultProps = {
      buttonType: "button"
    };
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _regeneratorRuntime() {
      _regeneratorRuntime = function() {
        return exports2;
      };
      var exports2 = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function(obj, key, desc) {
        obj[key] = desc.value;
      }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        }), obj[key];
      }
      try {
        define({}, "");
      } catch (err) {
        define = function(obj, key, value) {
          return obj[key] = value;
        };
      }
      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []);
        return defineProperty(generator, "_invoke", {
          value: makeInvokeMethod(innerFn, self, context)
        }), generator;
      }
      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }
      exports2.wrap = wrap;
      var ContinueSentinel = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function() {
        return this;
      });
      var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          define(prototype, method, function(arg) {
            return this._invoke(method, arg);
          });
        });
      }
      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if ("throw" !== record.type) {
            var result = record.arg, value = result.value;
            return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value2) {
              invoke("next", value2, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function(unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function(error) {
              return invoke("throw", error, resolve, reject);
            });
          }
          reject(record.arg);
        }
        var previousPromise;
        defineProperty(this, "_invoke", {
          value: function(method, arg) {
            function callInvokeWithMethodAndArg() {
              return new PromiseImpl(function(resolve, reject) {
                invoke(method, arg, resolve, reject);
              });
            }
            return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
        });
      }
      function makeInvokeMethod(innerFn, self, context) {
        var state = "suspendedStart";
        return function(method, arg) {
          if ("executing" === state)
            throw new Error("Generator is already running");
          if ("completed" === state) {
            if ("throw" === method)
              throw arg;
            return doneResult();
          }
          for (context.method = method, context.arg = arg; ; ) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel)
                  continue;
                return delegateResult;
              }
            }
            if ("next" === context.method)
              context.sent = context._sent = context.arg;
            else if ("throw" === context.method) {
              if ("suspendedStart" === state)
                throw state = "completed", context.arg;
              context.dispatchException(context.arg);
            } else
              "return" === context.method && context.abrupt("return", context.arg);
            state = "executing";
            var record = tryCatch(innerFn, self, context);
            if ("normal" === record.type) {
              if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
                continue;
              return {
                value: record.arg,
                done: context.done
              };
            }
            "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
          }
        };
      }
      function maybeInvokeDelegate(delegate, context) {
        var methodName = context.method, method = delegate.iterator[methodName];
        if (void 0 === method)
          return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = void 0, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type)
          return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = void 0), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }
      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }
      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }
      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(true);
      }
      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod)
            return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next)
            return iterable;
          if (!isNaN(iterable.length)) {
            var i = -1, next = function next2() {
              for (; ++i < iterable.length; )
                if (hasOwn.call(iterable, i))
                  return next2.value = iterable[i], next2.done = false, next2;
              return next2.value = void 0, next2.done = true, next2;
            };
            return next.next = next;
          }
        }
        return {
          next: doneResult
        };
      }
      function doneResult() {
        return {
          value: void 0,
          done: true
        };
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: true
      }), defineProperty(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: true
      }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports2.isGeneratorFunction = function(genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports2.mark = function(genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports2.awrap = function(arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
      }), exports2.AsyncIterator = AsyncIterator, exports2.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
        return this;
      }), define(Gp, "toString", function() {
        return "[object Generator]";
      }), exports2.keys = function(val) {
        var object = Object(val), keys = [];
        for (var key in object)
          keys.push(key);
        return keys.reverse(), function next() {
          for (; keys.length; ) {
            var key2 = keys.pop();
            if (key2 in object)
              return next.value = key2, next.done = false, next;
          }
          return next.done = true, next;
        };
      }, exports2.values = values, Context.prototype = {
        constructor: Context,
        reset: function(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
            for (var name in this)
              "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = void 0);
        },
        stop: function() {
          this.done = true;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type)
            throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function(exception) {
          if (this.done)
            throw exception;
          var context = this;
          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = void 0), !!caught;
          }
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i], record = entry.completion;
            if ("root" === entry.tryLoc)
              return handle("end");
            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc)
                  return handle(entry.catchLoc, true);
                if (this.prev < entry.finallyLoc)
                  return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc)
                  return handle(entry.catchLoc, true);
              } else {
                if (!hasFinally)
                  throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc)
                  return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }
          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function(record, afterLoc) {
          if ("throw" === record.type)
            throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc)
              return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        catch: function(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName,
            nextLoc
          }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
        }
      }, exports2;
    }
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    var instance = axios.create();
    instance.interceptors.response.use(function(response) {
      return response.data;
    });
    var getterFunction = function getterFunction2(_ref) {
      var url = _ref.url, data = _ref.data, accepts = _ref.accepts, contentType = _ref.contentType, withCredentials = _ref.withCredentials;
      instance.defaults.headers.common["Accepts"] = accepts;
      instance.defaults.headers.common["Content-Type"] = contentType;
      instance.defaults.withCredentials = withCredentials;
      var options = {
        url: url + "?nocache=" + (/* @__PURE__ */ new Date()).getTime(),
        method: "post",
        data
      };
      return instance(options);
    };
    var generateSignature = function generateSignature2(cb, params, _ref, logging) {
      var generateSignatureUrl = _ref.generateSignatureUrl, accepts = _ref.accepts, contentType = _ref.contentType, withCredentials = _ref.withCredentials, customPublicId = _ref.customPublicId, eager = _ref.eager, apiKey = _ref.apiKey, resourceType = _ref.resourceType, unique_filename = _ref.unique_filename, use_filename = _ref.use_filename;
      params = [].concat(params);
      logging && console.log(params, "Params");
      Promise.all(params.map(function(req) {
        var uploadParams = req;
        logging && console.log(req);
        return getterFunction({
          url: generateSignatureUrl,
          data: {
            params_to_sign: _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, req.custom_coordinates && {
              custom_coordinates: req.custom_coordinates
            }), eager && {
              eager
            }), req.filename_override && {
              filename_override: req.filename_override
            }), req.headers && {
              headers: req.headers
            }), customPublicId && {
              public_id: customPublicId
            }), req.source && {
              source: req.source
            }), {}, {
              timestamp: req.timestamp,
              unique_filename: req.unique_filename
            }, req.upload_preset && {
              upload_preset: req.upload_preset
            }), {}, {
              use_filename
            })
          },
          accepts,
          contentType,
          withCredentials
        }).then(function(response) {
          logging && console.log(response, "Signature Response");
          return Object.assign(_objectSpread2(_objectSpread2(_objectSpread2({}, eager && {
            eager
          }), customPublicId && {
            public_id: customPublicId
          }), {}, {
            signature: response,
            api_key: apiKey,
            resource_type: resourceType
          }), uploadParams);
        });
      })).then(function(results) {
        logging && console.log(results, "Results");
        cb(results.length === 1 ? results[0] : results);
      });
    };
    var myWidget = function myWidget2(sources, sourceKeys, resourceType, cloudName, uploadPreset, folder, cropping, generateSignatureUrl, onSuccess, onFailure, logging, customPublicId, eager, apiKey, accepts, contentType, withCredentials, use_filename, unique_filename, googleDriveClientId, multiple, widgetStyles, destroy, autoClose) {
      var widgetOptions = _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({
        showCompletedButton: true,
        multiple,
        singleUploadAutoClose: autoClose,
        showAdvancedOptions: true,
        showPoweredBy: false,
        styles: widgetStyles,
        googleDriveClientId,
        sources
      }, sourceKeys && sourceKeys), {}, {
        cloudName,
        uploadPreset,
        folder,
        cropping,
        resourceType
      }, generateSignatureUrl && {
        use_filename
      }), generateSignatureUrl && {
        eager
      }), generateSignatureUrl && {
        unique_filename
      }), generateSignatureUrl && {
        prepareUploadParams: function() {
          var _prepareUploadParams = _asyncToGenerator(_regeneratorRuntime().mark(function _callee(cb, params) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    return _context.abrupt("return", generateSignature(cb, params, {
                      generateSignatureUrl,
                      accepts,
                      contentType,
                      withCredentials,
                      customPublicId,
                      eager,
                      apiKey,
                      resourceType,
                      unique_filename,
                      use_filename
                    }, logging));
                  case 1:
                  case "end":
                    return _context.stop();
                }
            }, _callee);
          }));
          function prepareUploadParams(_x, _x2) {
            return _prepareUploadParams.apply(this, arguments);
          }
          return prepareUploadParams;
        }()
      });
      var resultCallback = function resultCallback2(error, result) {
        if (!error && result && result.event === "success") {
          logging && console.log("Done! Here is the image info: ", result.info);
          logging && console.log(result);
          !!window.cloudinaryOnSuccessCallback && window.cloudinaryOnSuccessCallback(result);
          if (destroy) {
            window.myWidget.destroy();
            window.myWidget = null;
          }
        } else if (error) {
          window.cloudinaryOnFailureCallback ? window.cloudinaryOnFailureCallback({
            error,
            result
          }) : logging && console.log({
            error,
            result
          });
          if (destroy) {
            window.myWidget.destroy();
            window.myWidget = null;
          }
        } else if (!!resourceType && result.info === "shown") {
          logging && console.log("setting resourceType");
        } else {
          logging && console.log(result);
        }
      };
      window.cloudinaryOnSuccessCallback = onSuccess;
      window.cloudinaryOnFailureCallback = onFailure;
      if (window.myWidget) {
        window.myWidget.update(widgetOptions);
      } else {
        window.myWidget = window.cloudinary.createUploadWidget(widgetOptions, resultCallback);
      }
      window.myWidget.open();
    };
    var UploadWidget = function UploadWidget2(_ref) {
      var _ref$sources = _ref.sources, sources = _ref$sources === void 0 ? [] : _ref$sources, _ref$sourceKeys = _ref.sourceKeys, sourceKeys = _ref$sourceKeys === void 0 ? null : _ref$sourceKeys, _ref$resourceType = _ref.resourceType, resourceType = _ref$resourceType === void 0 ? "auto" : _ref$resourceType, _ref$cloudName = _ref.cloudName, cloudName = _ref$cloudName === void 0 ? null : _ref$cloudName, _ref$uploadPreset = _ref.uploadPreset, uploadPreset = _ref$uploadPreset === void 0 ? null : _ref$uploadPreset, _ref$buttonText = _ref.buttonText, buttonText = _ref$buttonText === void 0 ? null : _ref$buttonText, _ref$style = _ref.style, style = _ref$style === void 0 ? null : _ref$style, _ref$widgetStyles = _ref.widgetStyles, widgetStyles = _ref$widgetStyles === void 0 ? null : _ref$widgetStyles, _ref$folder = _ref.folder, folder = _ref$folder === void 0 ? null : _ref$folder, _ref$cropping = _ref.cropping, cropping = _ref$cropping === void 0 ? true : _ref$cropping, generateSignatureUrl = _ref.generateSignatureUrl, _ref$onSuccess = _ref.onSuccess, onSuccess = _ref$onSuccess === void 0 ? null : _ref$onSuccess, _ref$onFailure = _ref.onFailure, onFailure = _ref$onFailure === void 0 ? null : _ref$onFailure, _ref$logging = _ref.logging, logging = _ref$logging === void 0 ? true : _ref$logging, _ref$customPublicId = _ref.customPublicId, customPublicId = _ref$customPublicId === void 0 ? null : _ref$customPublicId, _ref$eager = _ref.eager, eager = _ref$eager === void 0 ? null : _ref$eager, _ref$apiKey = _ref.apiKey, apiKey = _ref$apiKey === void 0 ? null : _ref$apiKey, _ref$accepts = _ref.accepts, accepts = _ref$accepts === void 0 ? "application/json" : _ref$accepts, _ref$contentType = _ref.contentType, contentType = _ref$contentType === void 0 ? "application/json" : _ref$contentType, _ref$withCredentials = _ref.withCredentials, withCredentials = _ref$withCredentials === void 0 ? true : _ref$withCredentials, _ref$use_filename = _ref.use_filename, use_filename = _ref$use_filename === void 0 ? true : _ref$use_filename, _ref$unique_filename = _ref.unique_filename, unique_filename = _ref$unique_filename === void 0 ? false : _ref$unique_filename, _ref$googleDriveClien = _ref.googleDriveClientId, googleDriveClientId = _ref$googleDriveClien === void 0 ? null : _ref$googleDriveClien, _ref$multiple = _ref.multiple, multiple = _ref$multiple === void 0 ? false : _ref$multiple, _ref$buttonType = _ref.buttonType, buttonType = _ref$buttonType === void 0 ? "button" : _ref$buttonType, _ref$destroy = _ref.destroy, destroy = _ref$destroy === void 0 ? false : _ref$destroy, _ref$autoClose = _ref.autoClose, autoClose = _ref$autoClose === void 0 ? true : _ref$autoClose;
      var myWidgetFunction = function myWidgetFunction2() {
        return myWidget(sources, sourceKeys, resourceType, cloudName, uploadPreset, folder, cropping, generateSignatureUrl, onSuccess, onFailure, logging, customPublicId, eager, apiKey, accepts, contentType, withCredentials, use_filename, unique_filename, googleDriveClientId, multiple, widgetStyles, destroy, autoClose);
      };
      return React__default.createElement(WidgetButton, {
        myWidgetFunction,
        buttonText,
        buttonType,
        style
      });
    };
    var useScript = function(url) {
      React.useEffect(function() {
        var script = document.createElement("script");
        script.type = "text/javascript";
        script.src = url;
        script.async = true;
        document.body.appendChild(script);
        return function() {
          document.body.removeChild(script);
          window.myWidget = null;
        };
      }, [url]);
    };
    var WidgetLoader = function WidgetLoader2() {
      return React__default.createElement(React__default.Fragment, null, useScript("https://widget.cloudinary.com/v2.0/global/all.js"));
    };
    var Widget = function Widget2(props) {
      return React__default.createElement(UploadWidget, props);
    };
    exports.Widget = Widget;
    exports.WidgetLoader = WidgetLoader;
  }
});
export default require_dist();
//# sourceMappingURL=react-cloudinary-upload-widget.js.map
