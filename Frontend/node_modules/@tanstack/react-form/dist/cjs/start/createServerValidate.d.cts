import { decode } from 'decode-formdata';
import { FormOptions, ValidationError, Validator } from '@tanstack/form-core';
import { FetchFn } from '@tanstack/start';
type Ctx = Parameters<FetchFn<FormData, unknown>>[1];
type OnServerValidateFn<TFormData> = (props: {
    value: TFormData;
}) => ValidationError | Promise<ValidationError>;
type OnServerValidateOrFn<TFormData, TFormValidator extends Validator<TFormData, unknown> | undefined = undefined> = TFormValidator extends Validator<TFormData, infer FFN> ? FFN | OnServerValidateFn<TFormData> : OnServerValidateFn<TFormData>;
interface CreateServerValidateOptions<TFormData, TFormValidator extends Validator<TFormData, unknown> | undefined = undefined> extends FormOptions<TFormData, TFormValidator> {
    onServerValidate: OnServerValidateOrFn<TFormData, TFormValidator>;
}
export declare const createServerValidate: <TFormData, TFormValidator extends Validator<TFormData, unknown> | undefined = undefined>(defaultOpts: CreateServerValidateOptions<TFormData, TFormValidator>) => (ctx: Ctx, formData: FormData, info?: Parameters<typeof decode>[1]) => Promise<void>;
export {};
