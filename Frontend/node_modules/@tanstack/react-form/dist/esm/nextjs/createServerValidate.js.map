{"version":3,"file":"createServerValidate.js","sources":["../../../src/nextjs/createServerValidate.ts"],"sourcesContent":["import { decode } from 'decode-formdata'\nimport { ServerValidateError } from './error'\nimport type {\n  FormOptions,\n  ValidationError,\n  Validator,\n} from '@tanstack/form-core'\nimport type { ServerFormState } from './types'\n\ntype OnServerValidateFn<TFormData> = (props: {\n  value: TFormData\n}) => ValidationError | Promise<ValidationError>\n\ntype OnServerValidateOrFn<\n  TFormData,\n  TFormValidator extends Validator<TFormData, unknown> | undefined = undefined,\n> =\n  TFormValidator extends Validator<TFormData, infer FFN>\n    ? FFN | OnServerValidateFn<TFormData>\n    : OnServerValidateFn<TFormData>\n\ninterface CreateServerValidateOptions<\n  TFormData,\n  TFormValidator extends Validator<TFormData, unknown> | undefined = undefined,\n> extends FormOptions<TFormData, TFormValidator> {\n  onServerValidate: OnServerValidateOrFn<TFormData, TFormValidator>\n}\n\nexport const createServerValidate =\n  <\n    TFormData,\n    TFormValidator extends\n      | Validator<TFormData, unknown>\n      | undefined = undefined,\n  >(\n    defaultOpts: CreateServerValidateOptions<TFormData, TFormValidator>,\n  ) =>\n  async (formData: FormData, info?: Parameters<typeof decode>[1]) => {\n    const { validatorAdapter, onServerValidate } = defaultOpts\n\n    const runValidator = async (propsValue: { value: TFormData }) => {\n      if (validatorAdapter && typeof onServerValidate !== 'function') {\n        return validatorAdapter().validateAsync(propsValue, onServerValidate)\n      }\n\n      return (onServerValidate as OnServerValidateFn<TFormData>)(propsValue)\n    }\n\n    const values = decode(formData, info) as never as TFormData\n\n    const onServerError = await runValidator({ value: values })\n\n    if (!onServerError) return\n\n    const formState: ServerFormState<TFormData> = {\n      errorMap: {\n        onServer: onServerError,\n      },\n      values,\n      errors: onServerError ? [onServerError] : [],\n    }\n\n    throw new ServerValidateError({\n      formState,\n    })\n  }\n\nexport const initialFormState: ServerFormState<any> = {\n  errorMap: {\n    onServer: undefined,\n  },\n  values: undefined,\n  errors: [],\n}\n"],"names":[],"mappings":";;AA4BO,MAAM,uBACX,CAME,gBAEF,OAAO,UAAoB,SAAwC;AAC3D,QAAA,EAAE,kBAAkB,iBAAqB,IAAA;AAEzC,QAAA,eAAe,OAAO,eAAqC;AAC3D,QAAA,oBAAoB,OAAO,qBAAqB,YAAY;AAC9D,aAAO,iBAAiB,EAAE,cAAc,YAAY,gBAAgB;AAAA,IACtE;AAEA,WAAQ,iBAAmD,UAAU;AAAA,EAAA;AAGjE,QAAA,SAAS,OAAO,UAAU,IAAI;AAEpC,QAAM,gBAAgB,MAAM,aAAa,EAAE,OAAO,OAAQ,CAAA;AAE1D,MAAI,CAAC,cAAe;AAEpB,QAAM,YAAwC;AAAA,IAC5C,UAAU;AAAA,MACR,UAAU;AAAA,IACZ;AAAA,IACA;AAAA,IACA,QAAQ,gBAAgB,CAAC,aAAa,IAAI,CAAC;AAAA,EAAA;AAG7C,QAAM,IAAI,oBAAoB;AAAA,IAC5B;AAAA,EAAA,CACD;AACH;AAEK,MAAM,mBAAyC;AAAA,EACpD,UAAU;AAAA,IACR,UAAU;AAAA,EACZ;AAAA,EACA,QAAQ;AAAA,EACR,QAAQ,CAAC;AACX;"}