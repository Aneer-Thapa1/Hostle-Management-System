generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                       @id @default(autoincrement())
  name              String
  email             String                    @unique
  password          String
  address           String?
  contact           String
  role              UserRole                  @default(STUDENT)
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  bookings          Booking[]
  ratings           Rating[]
  favorites         Favorite[]
  hostelMemberships HostelMembership[]
  payments          Payment[]
  stayHistories     StayHistory[]
  conversations     ConversationParticipant[]
  messageReads      MessageRead[]
}

model HostelOwner {
  id                Int                       @id @default(autoincrement())
  hostelName        String
  ownerName         String
  email             String                    @unique
  password          String
  contact           String
  location          String
  address           String
  latitude          Float
  longitude         Float
  description       String                    @db.Text
  mainPhoto         String
  avgRating         Float                     @default(0)
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  rooms             Room[]
  bookings          Booking[]
  ratings           Rating[]
  favorites         Favorite[]
  packages          Package[]
  facilities        Facility[]
  galleryImages     GalleryImage[]
  meals             Meal[]
  nearbyAttractions NearbyAttraction[]
  hostelMemberships HostelMembership[]
  stayHistories     StayHistory[]
  conversations     ConversationParticipant[]
  messageReads      MessageRead[]
}

model Room {
  id               Int         @id @default(autoincrement())
  roomIdentifier   String
  type             RoomType
  floor            Int
  amenities        Json
  status           RoomStatus  @default(AVAILABLE)
  totalCapacity    Int
  currentOccupancy Int         @default(0)
  availableSpots   Int
  description      String      @db.Text
  price            Decimal     @db.Decimal(10, 2)
  roomCondition    String
  dateAvailable    DateTime
  hostelOwnerId    Int
  hostelOwner      HostelOwner @relation(fields: [hostelOwnerId], references: [id])
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  bookings         Booking[]

  @@index([hostelOwnerId])
}

model Booking {
  id                Int               @id @default(autoincrement())
  userId            Int
  user              User              @relation(fields: [userId], references: [id])
  hostelId          Int
  hostel            HostelOwner       @relation(fields: [hostelId], references: [id])
  roomId            Int?
  room              Room?             @relation(fields: [roomId], references: [id])
  packageId         Int
  package           Package           @relation(fields: [packageId], references: [id])
  checkInDate       DateTime
  checkOutDate      DateTime
  numberOfOccupants Int
  totalPrice        Decimal           @db.Decimal(10, 2)
  status            BookingStatus     @default(PENDING)
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  hostelMembership  HostelMembership?
  stayHistory       StayHistory?

  @@index([userId, hostelId, packageId])
}

model Rating {
  id        Int         @id @default(autoincrement())
  rating    Int
  comment   String?     @db.Text
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  hostelId  Int
  hostel    HostelOwner @relation(fields: [hostelId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([userId, hostelId])
}

model Favorite {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  hostelId  Int
  hostel    HostelOwner @relation(fields: [hostelId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([userId, hostelId])
}

model Package {
  id                Int                @id @default(autoincrement())
  name              String
  description       String             @db.Text
  price             Decimal            @db.Decimal(10, 2)
  duration          Int
  services          Json
  mealPlan          String
  hostelOwnerId     Int
  hostelOwner       HostelOwner        @relation(fields: [hostelOwnerId], references: [id])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  hostelMemberships HostelMembership[]
  bookings          Booking[]

  @@index([hostelOwnerId])
}

model HostelMembership {
  id        Int              @id @default(autoincrement())
  userId    Int
  user      User             @relation(fields: [userId], references: [id])
  hostelId  Int
  hostel    HostelOwner      @relation(fields: [hostelId], references: [id])
  packageId Int
  package   Package          @relation(fields: [packageId], references: [id])
  bookingId Int              @unique
  booking   Booking          @relation(fields: [bookingId], references: [id])
  startDate DateTime         @default(now())
  endDate   DateTime
  status    MembershipStatus @default(ACTIVE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  payments  Payment[]

  @@unique([userId, hostelId, packageId])
  @@index([userId, hostelId, packageId])
}

model Payment {
  id                 Int              @id @default(autoincrement())
  amount             Decimal          @db.Decimal(10, 2)
  paymentDate        DateTime         @default(now())
  paymentMethod      PaymentMethod
  status             PaymentStatus    @default(PENDING)
  userId             Int
  user               User             @relation(fields: [userId], references: [id])
  hostelMembershipId Int
  hostelMembership   HostelMembership @relation(fields: [hostelMembershipId], references: [id])
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([userId, hostelMembershipId])
}

model StayHistory {
  id           Int         @id @default(autoincrement())
  userId       Int
  user         User        @relation(fields: [userId], references: [id])
  hostelId     Int
  hostel       HostelOwner @relation(fields: [hostelId], references: [id])
  bookingId    Int         @unique
  booking      Booking     @relation(fields: [bookingId], references: [id])
  checkInDate  DateTime
  checkOutDate DateTime
  packageName  String
  roomType     RoomType
  totalPrice   Decimal     @db.Decimal(10, 2)
  createdAt    DateTime    @default(now())

  @@index([userId, hostelId])
}

model Facility {
  id             Int         @id @default(autoincrement())
  name           String
  description    String      @db.Text
  available      Boolean
  operatingHours String?
  hostelOwnerId  Int
  hostelOwner    HostelOwner @relation(fields: [hostelOwnerId], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([hostelOwnerId])
}

model GalleryImage {
  id            Int         @id @default(autoincrement())
  imageUrl      String
  description   String?
  hostelOwnerId Int
  hostelOwner   HostelOwner @relation(fields: [hostelOwnerId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([hostelOwnerId])
}

model Meal {
  id            Int         @id @default(autoincrement())
  name          String
  description   String      @db.Text
  price         Decimal     @db.Decimal(10, 2)
  isVegan       Boolean
  isGlutenFree  Boolean
  available     Boolean
  hostelOwnerId Int
  hostelOwner   HostelOwner @relation(fields: [hostelOwnerId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([hostelOwnerId])
}

model NearbyAttraction {
  id            Int         @id @default(autoincrement())
  name          String
  distance      Decimal     @db.Decimal(5, 2)
  type          String
  openingHours  String?
  description   String?     @db.Text
  hostelOwnerId Int
  hostelOwner   HostelOwner @relation(fields: [hostelOwnerId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([hostelOwnerId])
}

// New Chat Models
model Conversation {
  id            String                    @id @default(uuid())
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  lastMessageAt DateTime                  @default(now())
  messages      Message[]
  participants  ConversationParticipant[]

  @@index([lastMessageAt])
}

model ConversationParticipant {
  id             String       @id @default(uuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId         Int?
  user           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  hostelOwnerId  Int?
  hostelOwner    HostelOwner? @relation(fields: [hostelOwnerId], references: [id], onDelete: Cascade)
  joinedAt       DateTime     @default(now())
  leftAt         DateTime?

  @@unique([conversationId, userId])
  @@unique([conversationId, hostelOwnerId])
  @@index([conversationId, userId, hostelOwnerId])
}

model Message {
  id             String        @id @default(uuid())
  conversationId String
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId       Int
  senderType     SenderType
  content        String        @db.Text
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  readBy         MessageRead[]

  @@index([conversationId, createdAt])
}

model MessageRead {
  id            String       @id @default(uuid())
  messageId     String
  message       Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId        Int?
  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  hostelOwnerId Int?
  hostelOwner   HostelOwner? @relation(fields: [hostelOwnerId], references: [id], onDelete: Cascade)
  readAt        DateTime     @default(now())

  @@unique([messageId, userId])
  @@unique([messageId, hostelOwnerId])
  @@index([messageId, userId, hostelOwnerId])
}

enum UserRole {
  ADMIN
  HOSTEL_OWNER
  STUDENT
}

enum RoomType {
  SINGLE
  DOUBLE
  TRIPLE
  QUAD
  DORMITORY
}

enum RoomStatus {
  AVAILABLE
  FULLY_OCCUPIED
  PARTIALLY_OCCUPIED
  UNDER_MAINTENANCE
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  CASH
  MOBILE_PAYMENT
}

enum SenderType {
  USER
  HOSTEL_OWNER
}
