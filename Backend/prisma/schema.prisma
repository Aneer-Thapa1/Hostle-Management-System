// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  address   String
  contact   String
  role      String     @default("user")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  bookings  Booking[]
  ratings   Rating[]
  favorites Favorite[]
}

model HostelOwner {
  id          Int        @id @default(autoincrement())
  hostelName  String
  ownerName   String
  email       String     @unique
  contact     String
  password    String
  location    String
  address     String
  latitude    Float
  longitude   Float
  description String     @db.Text
  mainPhoto   String
  avgRating   Float      @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  rooms       Room[]
  deals       Deal[]
  bookings    Booking[]
  ratings     Rating[]
  favorites   Favorite[]
}

model Room {
  id             Int         @id @default(autoincrement())
  roomIdentifier String
  type           String
  floor          Int
  amenities      String      @db.Text // Store as JSON string
  status         String // "available", "occupied", "maintenance"
  capacity       Int
  description    String      @db.Text
  price          Float
  roomCondition  String
  dateAvailable  DateTime
  hostelOwnerId  Int
  hostelOwner    HostelOwner @relation(fields: [hostelOwnerId], references: [id])
  deals          Deal[] // New: A room can be associated with multiple deals
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Deal {
  id                 Int         @id @default(autoincrement())
  name               String
  description        String      @db.Text
  packageType        String // e.g., "Weekly", "Monthly", "Student", "Holiday"
  basePrice          Float // Regular price without discount
  discountPrice      Float? // Optional discounted price
  maxOccupancy       Int // Maximum number of guests for this deal
  amenities          String      @db.Text // Store as JSON string
  features           String      @db.Text // Store as JSON string
  startDate          DateTime? // Optional start date for seasonal or limited-time deals
  endDate            DateTime? // Optional end date for seasonal or limited-time deals
  isActive           Boolean     @default(true)
  termsAndConditions String      @db.Text
  hostelOwnerId      Int
  hostelOwner        HostelOwner @relation(fields: [hostelOwnerId], references: [id])
  rooms              Room[] // New: A deal can be associated with multiple rooms
  bookings           Booking[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

model Booking {
  id           Int         @id @default(autoincrement())
  userId       Int
  user         User        @relation(fields: [userId], references: [id])
  hostelId     Int
  hostel       HostelOwner @relation(fields: [hostelId], references: [id])
  dealId       Int?
  deal         Deal?       @relation(fields: [dealId], references: [id])
  checkInDate  DateTime
  checkOutDate DateTime
  totalPrice   Float
  status       String // "pending", "confirmed", "cancelled", "completed"
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Rating {
  id        Int         @id @default(autoincrement())
  rating    Int
  comment   String?     @db.Text
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  hostelId  Int
  hostel    HostelOwner @relation(fields: [hostelId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Favorite {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  hostelId  Int
  hostel    HostelOwner @relation(fields: [hostelId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([userId, hostelId])
}
