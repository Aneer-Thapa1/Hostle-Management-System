generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  name              String
  email             String             @unique
  password          String
  address           String
  contact           String
  role              String             @default("user")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  bookings          Booking[]
  ratings           Rating[]
  favorites         Favorite[]
  hostelMemberships HostelMembership[]
  payments          Payment[]
}

model HostelOwner {
  id                Int                @id @default(autoincrement())
  hostelName        String
  ownerName         String
  email             String             @unique
  contact           String
  password          String
  location          String
  address           String
  latitude          Float
  longitude         Float
  description       String             @db.Text
  mainPhoto         String
  avgRating         Float              @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  rooms             Room[]
  bookings          Booking[]
  ratings           Rating[]
  favorites         Favorite[]
  packages          Package[]
  facilities        Facility[]
  galleryImages     GalleryImage[]
  meals             Meal[]
  nearbyAttractions NearbyAttraction[]
  hostelMemberships HostelMembership[]
}

model Room {
  id             Int         @id @default(autoincrement())
  roomIdentifier String
  type           String
  floor          Int
  amenities      String      @db.Text
  status         String
  capacity       Int
  description    String      @db.Text
  price          Float
  roomCondition  String
  dateAvailable  DateTime
  hostelOwnerId  Int
  hostelOwner    HostelOwner @relation(fields: [hostelOwnerId], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Booking {
  id           Int         @id @default(autoincrement())
  userId       Int
  user         User        @relation(fields: [userId], references: [id])
  hostelId     Int
  hostel       HostelOwner @relation(fields: [hostelId], references: [id])
  checkInDate  DateTime
  checkOutDate DateTime
  totalPrice   Float
  status       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  dealId       Int?
}

model Rating {
  id        Int         @id @default(autoincrement())
  rating    Int
  comment   String?     @db.Text
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  hostelId  Int
  hostel    HostelOwner @relation(fields: [hostelId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Favorite {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  hostelId  Int
  hostel    HostelOwner @relation(fields: [hostelId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([userId, hostelId])
}

model Package {
  id                 Int                @id @default(autoincrement())
  name               String
  description        String             @db.Text
  price              Float
  duration           Int
  services           String             @db.Text
  mealPlan           String
  cancellationPolicy String
  hostelOwnerId      Int
  hostelOwner        HostelOwner        @relation(fields: [hostelOwnerId], references: [id])
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  memberships        HostelMembership[]
}

model HostelMembership {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  hostelId  Int
  hostel    HostelOwner @relation(fields: [hostelId], references: [id])
  packageId Int
  package   Package     @relation(fields: [packageId], references: [id])
  startDate DateTime    @default(now())
  endDate   DateTime
  status    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  payments  Payment[]

  @@unique([userId, hostelId, packageId])
}

model Payment {
  id                 Int              @id @default(autoincrement())
  amount             Float
  paymentDate        DateTime         @default(now())
  paymentMethod      String
  status             String
  userId             Int
  user               User             @relation(fields: [userId], references: [id])
  hostelMembershipId Int
  hostelMembership   HostelMembership @relation(fields: [hostelMembershipId], references: [id])
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model Facility {
  id             Int         @id @default(autoincrement())
  name           String
  description    String      @db.Text
  available      Boolean
  operatingHours String?
  hostelOwnerId  Int
  hostelOwner    HostelOwner @relation(fields: [hostelOwnerId], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model GalleryImage {
  id            Int         @id @default(autoincrement())
  imageUrl      String
  description   String?
  hostelOwnerId Int
  hostelOwner   HostelOwner @relation(fields: [hostelOwnerId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Meal {
  id            Int         @id @default(autoincrement())
  name          String
  description   String      @db.Text
  price         Float
  isVegan       Boolean
  isGlutenFree  Boolean
  available     Boolean
  hostelOwnerId Int
  hostelOwner   HostelOwner @relation(fields: [hostelOwnerId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model NearbyAttraction {
  id            Int         @id @default(autoincrement())
  name          String
  distance      String
  type          String
  openingHours  String?
  description   String?     @db.Text
  hostelOwnerId Int
  hostelOwner   HostelOwner @relation(fields: [hostelOwnerId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
